using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BitSharp.Common.ExtensionMethods;
using BitSharp.Common;
using System.Collections.Immutable;

namespace BitSharp.WireProtocol.Test
{
    [TestClass]
    public class VersionPayloadTest
    {
        public static readonly VersionPayload VERSION_PAYLOAD_1 = new VersionPayload
        (
            ProtocolVersion: 0x01,
            ServicesBitfield: 0x02,
            UnixTime: 0x03,
            RemoteAddress: NetworkAddressTest.NETWORK_ADDRESS_1,
            LocalAddress: NetworkAddressTest.NETWORK_ADDRESS_1,
            Nonce: 0x04,
            UserAgent: "UserAgent",
            StartBlockHeight: 0x05,
            Relay: true
        );

        public static readonly ImmutableArray<byte> VERSION_PAYLOAD_1_BYTES = ImmutableArray.Create<byte>(0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00);

        public static readonly VersionPayload VERSION_PAYLOAD_2 = new VersionPayload
        (
            ProtocolVersion: VersionPayload.RELAY_VERSION,
            ServicesBitfield: 0x02,
            UnixTime: 0x03,
            RemoteAddress: NetworkAddressTest.NETWORK_ADDRESS_1,
            LocalAddress: NetworkAddressTest.NETWORK_ADDRESS_1,
            Nonce: 0x04,
            UserAgent: "UserAgent",
            StartBlockHeight: 0x05,
            Relay: true
        );

        public static readonly ImmutableArray<byte> VERSION_PAYLOAD_2_BYTES = ImmutableArray.Create<byte>(0x71, 0x11, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x05, 0x00, 0x00, 0x00, 0x01);

        [TestMethod]
        public void TestWireEncodeVersionPayload()
        {
            var actual1 = VERSION_PAYLOAD_1.With().ToRawBytes();
            Debug.WriteLine(actual1.ToHexDataString());
            CollectionAssert.AreEqual(VERSION_PAYLOAD_1_BYTES.ToList(), actual1.ToList());

            var actual2 = VERSION_PAYLOAD_2.With().ToRawBytes();
            Debug.WriteLine(actual2.ToHexDataString());
            CollectionAssert.AreEqual(VERSION_PAYLOAD_2_BYTES.ToList(), actual2.ToList());
        }

        [TestMethod]
        public void TestWireDecodeVersionPayload()
        {
            var actual1 = VersionPayload.FromRawBytes(VERSION_PAYLOAD_1_BYTES.ToArray()).With().ToRawBytes();
            CollectionAssert.AreEqual(VERSION_PAYLOAD_1_BYTES.ToList(), actual1.ToList());

            var actual2 = VersionPayload.FromRawBytes(VERSION_PAYLOAD_2_BYTES.ToArray()).With().ToRawBytes();
            CollectionAssert.AreEqual(VERSION_PAYLOAD_2_BYTES.ToList(), actual2.ToList());
        }
    }
}
